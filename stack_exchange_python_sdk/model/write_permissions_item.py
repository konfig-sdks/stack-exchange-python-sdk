# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class WritePermissionsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            can_add = schemas.BoolSchema
            can_delete = schemas.BoolSchema
            can_edit = schemas.BoolSchema
            max_daily_actions = schemas.IntSchema
            min_seconds_between_actions = schemas.IntSchema
            object_type = schemas.StrSchema
            user_id = schemas.IntSchema
            __annotations__ = {
                "can_add": can_add,
                "can_delete": can_delete,
                "can_edit": can_edit,
                "max_daily_actions": max_daily_actions,
                "min_seconds_between_actions": min_seconds_between_actions,
                "object_type": object_type,
                "user_id": user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_add"]) -> MetaOapg.properties.can_add: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_daily_actions"]) -> MetaOapg.properties.max_daily_actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_seconds_between_actions"]) -> MetaOapg.properties.min_seconds_between_actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object_type"]) -> MetaOapg.properties.object_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_add", "can_delete", "can_edit", "max_daily_actions", "min_seconds_between_actions", "object_type", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_add"]) -> typing.Union[MetaOapg.properties.can_add, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> typing.Union[MetaOapg.properties.can_delete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> typing.Union[MetaOapg.properties.can_edit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_daily_actions"]) -> typing.Union[MetaOapg.properties.max_daily_actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_seconds_between_actions"]) -> typing.Union[MetaOapg.properties.min_seconds_between_actions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object_type"]) -> typing.Union[MetaOapg.properties.object_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_add", "can_delete", "can_edit", "max_daily_actions", "min_seconds_between_actions", "object_type", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        can_add: typing.Union[MetaOapg.properties.can_add, bool, schemas.Unset] = schemas.unset,
        can_delete: typing.Union[MetaOapg.properties.can_delete, bool, schemas.Unset] = schemas.unset,
        can_edit: typing.Union[MetaOapg.properties.can_edit, bool, schemas.Unset] = schemas.unset,
        max_daily_actions: typing.Union[MetaOapg.properties.max_daily_actions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        min_seconds_between_actions: typing.Union[MetaOapg.properties.min_seconds_between_actions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        object_type: typing.Union[MetaOapg.properties.object_type, str, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WritePermissionsItem':
        return super().__new__(
            cls,
            *args,
            can_add=can_add,
            can_delete=can_delete,
            can_edit=can_edit,
            max_daily_actions=max_daily_actions,
            min_seconds_between_actions=min_seconds_between_actions,
            object_type=object_type,
            user_id=user_id,
            _configuration=_configuration,
            **kwargs,
        )
