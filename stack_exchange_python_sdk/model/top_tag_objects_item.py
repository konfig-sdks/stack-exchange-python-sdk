# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class TopTagObjectsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            answer_count = schemas.IntSchema
            answer_score = schemas.IntSchema
            question_count = schemas.IntSchema
            question_score = schemas.IntSchema
            tag_name = schemas.StrSchema
            user_id = schemas.IntSchema
            __annotations__ = {
                "answer_count": answer_count,
                "answer_score": answer_score,
                "question_count": question_count,
                "question_score": question_score,
                "tag_name": tag_name,
                "user_id": user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_count"]) -> MetaOapg.properties.answer_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_score"]) -> MetaOapg.properties.answer_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_count"]) -> MetaOapg.properties.question_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_score"]) -> MetaOapg.properties.question_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_name"]) -> MetaOapg.properties.tag_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["answer_count", "answer_score", "question_count", "question_score", "tag_name", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_count"]) -> typing.Union[MetaOapg.properties.answer_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_score"]) -> typing.Union[MetaOapg.properties.answer_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_count"]) -> typing.Union[MetaOapg.properties.question_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_score"]) -> typing.Union[MetaOapg.properties.question_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_name"]) -> typing.Union[MetaOapg.properties.tag_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["answer_count", "answer_score", "question_count", "question_score", "tag_name", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        answer_count: typing.Union[MetaOapg.properties.answer_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        answer_score: typing.Union[MetaOapg.properties.answer_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        question_count: typing.Union[MetaOapg.properties.question_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        question_score: typing.Union[MetaOapg.properties.question_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tag_name: typing.Union[MetaOapg.properties.tag_name, str, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TopTagObjectsItem':
        return super().__new__(
            cls,
            *args,
            answer_count=answer_count,
            answer_score=answer_score,
            question_count=question_count,
            question_score=question_score,
            tag_name=tag_name,
            user_id=user_id,
            _configuration=_configuration,
            **kwargs,
        )
