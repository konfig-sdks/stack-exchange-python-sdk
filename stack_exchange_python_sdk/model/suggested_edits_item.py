# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class SuggestedEditsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['SuggestedEditsItemTags']:
                return SuggestedEditsItemTags
            title = schemas.StrSchema
            approval_date = schemas.IntSchema
            body = schemas.StrSchema
            comment = schemas.StrSchema
            creation_date = schemas.IntSchema
            post_id = schemas.IntSchema
            post_type = schemas.StrSchema
        
            @staticmethod
            def proposing_user() -> typing.Type['SuggestedEditsItemProposingUser']:
                return SuggestedEditsItemProposingUser
            rejection_date = schemas.IntSchema
            suggested_edit_id = schemas.IntSchema
            __annotations__ = {
                "tags": tags,
                "title": title,
                "approval_date": approval_date,
                "body": body,
                "comment": comment,
                "creation_date": creation_date,
                "post_id": post_id,
                "post_type": post_type,
                "proposing_user": proposing_user,
                "rejection_date": rejection_date,
                "suggested_edit_id": suggested_edit_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'SuggestedEditsItemTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approval_date"]) -> MetaOapg.properties.approval_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_id"]) -> MetaOapg.properties.post_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_type"]) -> MetaOapg.properties.post_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposing_user"]) -> 'SuggestedEditsItemProposingUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rejection_date"]) -> MetaOapg.properties.rejection_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggested_edit_id"]) -> MetaOapg.properties.suggested_edit_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "title", "approval_date", "body", "comment", "creation_date", "post_id", "post_type", "proposing_user", "rejection_date", "suggested_edit_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['SuggestedEditsItemTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approval_date"]) -> typing.Union[MetaOapg.properties.approval_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> typing.Union[MetaOapg.properties.creation_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_id"]) -> typing.Union[MetaOapg.properties.post_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_type"]) -> typing.Union[MetaOapg.properties.post_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposing_user"]) -> typing.Union['SuggestedEditsItemProposingUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rejection_date"]) -> typing.Union[MetaOapg.properties.rejection_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggested_edit_id"]) -> typing.Union[MetaOapg.properties.suggested_edit_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "title", "approval_date", "body", "comment", "creation_date", "post_id", "post_type", "proposing_user", "rejection_date", "suggested_edit_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['SuggestedEditsItemTags', schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        approval_date: typing.Union[MetaOapg.properties.approval_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        post_id: typing.Union[MetaOapg.properties.post_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        post_type: typing.Union[MetaOapg.properties.post_type, str, schemas.Unset] = schemas.unset,
        proposing_user: typing.Union['SuggestedEditsItemProposingUser', schemas.Unset] = schemas.unset,
        rejection_date: typing.Union[MetaOapg.properties.rejection_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        suggested_edit_id: typing.Union[MetaOapg.properties.suggested_edit_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SuggestedEditsItem':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            title=title,
            approval_date=approval_date,
            body=body,
            comment=comment,
            creation_date=creation_date,
            post_id=post_id,
            post_type=post_type,
            proposing_user=proposing_user,
            rejection_date=rejection_date,
            suggested_edit_id=suggested_edit_id,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.suggested_edits_item_proposing_user import SuggestedEditsItemProposingUser
from stack_exchange_python_sdk.model.suggested_edits_item_tags import SuggestedEditsItemTags
