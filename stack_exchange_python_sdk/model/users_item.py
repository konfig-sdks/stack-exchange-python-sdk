# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class UsersItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            about_me = schemas.StrSchema
            accept_rate = schemas.IntSchema
            account_id = schemas.IntSchema
            age = schemas.IntSchema
            answer_count = schemas.IntSchema
        
            @staticmethod
            def badge_counts() -> typing.Type['UsersItemBadgeCounts']:
                return UsersItemBadgeCounts
            creation_date = schemas.IntSchema
            display_name = schemas.StrSchema
            down_vote_count = schemas.IntSchema
            is_employee = schemas.BoolSchema
            last_access_date = schemas.IntSchema
            last_modified_date = schemas.IntSchema
            link = schemas.StrSchema
            location = schemas.StrSchema
            profile_image = schemas.StrSchema
            question_count = schemas.IntSchema
            reputation = schemas.IntSchema
            reputation_change_day = schemas.IntSchema
            reputation_change_month = schemas.IntSchema
            reputation_change_quarter = schemas.IntSchema
            reputation_change_week = schemas.IntSchema
            reputation_change_year = schemas.IntSchema
            timed_penalty_date = schemas.IntSchema
            up_vote_count = schemas.IntSchema
            user_id = schemas.IntSchema
            user_type = schemas.StrSchema
            view_count = schemas.IntSchema
            website_url = schemas.StrSchema
            __annotations__ = {
                "about_me": about_me,
                "accept_rate": accept_rate,
                "account_id": account_id,
                "age": age,
                "answer_count": answer_count,
                "badge_counts": badge_counts,
                "creation_date": creation_date,
                "display_name": display_name,
                "down_vote_count": down_vote_count,
                "is_employee": is_employee,
                "last_access_date": last_access_date,
                "last_modified_date": last_modified_date,
                "link": link,
                "location": location,
                "profile_image": profile_image,
                "question_count": question_count,
                "reputation": reputation,
                "reputation_change_day": reputation_change_day,
                "reputation_change_month": reputation_change_month,
                "reputation_change_quarter": reputation_change_quarter,
                "reputation_change_week": reputation_change_week,
                "reputation_change_year": reputation_change_year,
                "timed_penalty_date": timed_penalty_date,
                "up_vote_count": up_vote_count,
                "user_id": user_id,
                "user_type": user_type,
                "view_count": view_count,
                "website_url": website_url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["about_me"]) -> MetaOapg.properties.about_me: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accept_rate"]) -> MetaOapg.properties.accept_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["age"]) -> MetaOapg.properties.age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_count"]) -> MetaOapg.properties.answer_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["badge_counts"]) -> 'UsersItemBadgeCounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["down_vote_count"]) -> MetaOapg.properties.down_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_employee"]) -> MetaOapg.properties.is_employee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_access_date"]) -> MetaOapg.properties.last_access_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified_date"]) -> MetaOapg.properties.last_modified_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_image"]) -> MetaOapg.properties.profile_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_count"]) -> MetaOapg.properties.question_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reputation"]) -> MetaOapg.properties.reputation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reputation_change_day"]) -> MetaOapg.properties.reputation_change_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reputation_change_month"]) -> MetaOapg.properties.reputation_change_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reputation_change_quarter"]) -> MetaOapg.properties.reputation_change_quarter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reputation_change_week"]) -> MetaOapg.properties.reputation_change_week: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reputation_change_year"]) -> MetaOapg.properties.reputation_change_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timed_penalty_date"]) -> MetaOapg.properties.timed_penalty_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["up_vote_count"]) -> MetaOapg.properties.up_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_type"]) -> MetaOapg.properties.user_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_count"]) -> MetaOapg.properties.view_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website_url"]) -> MetaOapg.properties.website_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["about_me", "accept_rate", "account_id", "age", "answer_count", "badge_counts", "creation_date", "display_name", "down_vote_count", "is_employee", "last_access_date", "last_modified_date", "link", "location", "profile_image", "question_count", "reputation", "reputation_change_day", "reputation_change_month", "reputation_change_quarter", "reputation_change_week", "reputation_change_year", "timed_penalty_date", "up_vote_count", "user_id", "user_type", "view_count", "website_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["about_me"]) -> typing.Union[MetaOapg.properties.about_me, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accept_rate"]) -> typing.Union[MetaOapg.properties.accept_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["age"]) -> typing.Union[MetaOapg.properties.age, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_count"]) -> typing.Union[MetaOapg.properties.answer_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["badge_counts"]) -> typing.Union['UsersItemBadgeCounts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> typing.Union[MetaOapg.properties.creation_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["down_vote_count"]) -> typing.Union[MetaOapg.properties.down_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_employee"]) -> typing.Union[MetaOapg.properties.is_employee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_access_date"]) -> typing.Union[MetaOapg.properties.last_access_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified_date"]) -> typing.Union[MetaOapg.properties.last_modified_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_image"]) -> typing.Union[MetaOapg.properties.profile_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_count"]) -> typing.Union[MetaOapg.properties.question_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reputation"]) -> typing.Union[MetaOapg.properties.reputation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reputation_change_day"]) -> typing.Union[MetaOapg.properties.reputation_change_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reputation_change_month"]) -> typing.Union[MetaOapg.properties.reputation_change_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reputation_change_quarter"]) -> typing.Union[MetaOapg.properties.reputation_change_quarter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reputation_change_week"]) -> typing.Union[MetaOapg.properties.reputation_change_week, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reputation_change_year"]) -> typing.Union[MetaOapg.properties.reputation_change_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timed_penalty_date"]) -> typing.Union[MetaOapg.properties.timed_penalty_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["up_vote_count"]) -> typing.Union[MetaOapg.properties.up_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_type"]) -> typing.Union[MetaOapg.properties.user_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_count"]) -> typing.Union[MetaOapg.properties.view_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website_url"]) -> typing.Union[MetaOapg.properties.website_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["about_me", "accept_rate", "account_id", "age", "answer_count", "badge_counts", "creation_date", "display_name", "down_vote_count", "is_employee", "last_access_date", "last_modified_date", "link", "location", "profile_image", "question_count", "reputation", "reputation_change_day", "reputation_change_month", "reputation_change_quarter", "reputation_change_week", "reputation_change_year", "timed_penalty_date", "up_vote_count", "user_id", "user_type", "view_count", "website_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        about_me: typing.Union[MetaOapg.properties.about_me, str, schemas.Unset] = schemas.unset,
        accept_rate: typing.Union[MetaOapg.properties.accept_rate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        account_id: typing.Union[MetaOapg.properties.account_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        age: typing.Union[MetaOapg.properties.age, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        answer_count: typing.Union[MetaOapg.properties.answer_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        badge_counts: typing.Union['UsersItemBadgeCounts', schemas.Unset] = schemas.unset,
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        down_vote_count: typing.Union[MetaOapg.properties.down_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_employee: typing.Union[MetaOapg.properties.is_employee, bool, schemas.Unset] = schemas.unset,
        last_access_date: typing.Union[MetaOapg.properties.last_access_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_modified_date: typing.Union[MetaOapg.properties.last_modified_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        profile_image: typing.Union[MetaOapg.properties.profile_image, str, schemas.Unset] = schemas.unset,
        question_count: typing.Union[MetaOapg.properties.question_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reputation: typing.Union[MetaOapg.properties.reputation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reputation_change_day: typing.Union[MetaOapg.properties.reputation_change_day, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reputation_change_month: typing.Union[MetaOapg.properties.reputation_change_month, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reputation_change_quarter: typing.Union[MetaOapg.properties.reputation_change_quarter, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reputation_change_week: typing.Union[MetaOapg.properties.reputation_change_week, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reputation_change_year: typing.Union[MetaOapg.properties.reputation_change_year, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timed_penalty_date: typing.Union[MetaOapg.properties.timed_penalty_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        up_vote_count: typing.Union[MetaOapg.properties.up_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_type: typing.Union[MetaOapg.properties.user_type, str, schemas.Unset] = schemas.unset,
        view_count: typing.Union[MetaOapg.properties.view_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        website_url: typing.Union[MetaOapg.properties.website_url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersItem':
        return super().__new__(
            cls,
            *args,
            about_me=about_me,
            accept_rate=accept_rate,
            account_id=account_id,
            age=age,
            answer_count=answer_count,
            badge_counts=badge_counts,
            creation_date=creation_date,
            display_name=display_name,
            down_vote_count=down_vote_count,
            is_employee=is_employee,
            last_access_date=last_access_date,
            last_modified_date=last_modified_date,
            link=link,
            location=location,
            profile_image=profile_image,
            question_count=question_count,
            reputation=reputation,
            reputation_change_day=reputation_change_day,
            reputation_change_month=reputation_change_month,
            reputation_change_quarter=reputation_change_quarter,
            reputation_change_week=reputation_change_week,
            reputation_change_year=reputation_change_year,
            timed_penalty_date=timed_penalty_date,
            up_vote_count=up_vote_count,
            user_id=user_id,
            user_type=user_type,
            view_count=view_count,
            website_url=website_url,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.users_item_badge_counts import UsersItemBadgeCounts
