# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class QuestionTimelineEventsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            comment_id = schemas.IntSchema
            creation_date = schemas.IntSchema
            down_vote_count = schemas.IntSchema
        
            @staticmethod
            def owner() -> typing.Type['QuestionTimelineEventsItemOwner']:
                return QuestionTimelineEventsItemOwner
            post_id = schemas.IntSchema
            question_id = schemas.IntSchema
            revision_guid = schemas.StrSchema
            timeline_type = schemas.StrSchema
            up_vote_count = schemas.IntSchema
        
            @staticmethod
            def user() -> typing.Type['QuestionTimelineEventsItemUser']:
                return QuestionTimelineEventsItemUser
            __annotations__ = {
                "comment_id": comment_id,
                "creation_date": creation_date,
                "down_vote_count": down_vote_count,
                "owner": owner,
                "post_id": post_id,
                "question_id": question_id,
                "revision_guid": revision_guid,
                "timeline_type": timeline_type,
                "up_vote_count": up_vote_count,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment_id"]) -> MetaOapg.properties.comment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["down_vote_count"]) -> MetaOapg.properties.down_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'QuestionTimelineEventsItemOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_id"]) -> MetaOapg.properties.post_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_id"]) -> MetaOapg.properties.question_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["revision_guid"]) -> MetaOapg.properties.revision_guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeline_type"]) -> MetaOapg.properties.timeline_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["up_vote_count"]) -> MetaOapg.properties.up_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'QuestionTimelineEventsItemUser': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["comment_id", "creation_date", "down_vote_count", "owner", "post_id", "question_id", "revision_guid", "timeline_type", "up_vote_count", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment_id"]) -> typing.Union[MetaOapg.properties.comment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> typing.Union[MetaOapg.properties.creation_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["down_vote_count"]) -> typing.Union[MetaOapg.properties.down_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['QuestionTimelineEventsItemOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_id"]) -> typing.Union[MetaOapg.properties.post_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_id"]) -> typing.Union[MetaOapg.properties.question_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["revision_guid"]) -> typing.Union[MetaOapg.properties.revision_guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeline_type"]) -> typing.Union[MetaOapg.properties.timeline_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["up_vote_count"]) -> typing.Union[MetaOapg.properties.up_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['QuestionTimelineEventsItemUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comment_id", "creation_date", "down_vote_count", "owner", "post_id", "question_id", "revision_guid", "timeline_type", "up_vote_count", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        comment_id: typing.Union[MetaOapg.properties.comment_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        down_vote_count: typing.Union[MetaOapg.properties.down_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner: typing.Union['QuestionTimelineEventsItemOwner', schemas.Unset] = schemas.unset,
        post_id: typing.Union[MetaOapg.properties.post_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        question_id: typing.Union[MetaOapg.properties.question_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        revision_guid: typing.Union[MetaOapg.properties.revision_guid, str, schemas.Unset] = schemas.unset,
        timeline_type: typing.Union[MetaOapg.properties.timeline_type, str, schemas.Unset] = schemas.unset,
        up_vote_count: typing.Union[MetaOapg.properties.up_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user: typing.Union['QuestionTimelineEventsItemUser', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QuestionTimelineEventsItem':
        return super().__new__(
            cls,
            *args,
            comment_id=comment_id,
            creation_date=creation_date,
            down_vote_count=down_vote_count,
            owner=owner,
            post_id=post_id,
            question_id=question_id,
            revision_guid=revision_guid,
            timeline_type=timeline_type,
            up_vote_count=up_vote_count,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.question_timeline_events_item_owner import QuestionTimelineEventsItemOwner
from stack_exchange_python_sdk.model.question_timeline_events_item_user import QuestionTimelineEventsItemUser
