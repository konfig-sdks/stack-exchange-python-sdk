# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class TagSynonymsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            applied_count = schemas.IntSchema
            creation_date = schemas.IntSchema
            from_tag = schemas.StrSchema
            last_applied_date = schemas.IntSchema
            to_tag = schemas.StrSchema
            __annotations__ = {
                "applied_count": applied_count,
                "creation_date": creation_date,
                "from_tag": from_tag,
                "last_applied_date": last_applied_date,
                "to_tag": to_tag,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applied_count"]) -> MetaOapg.properties.applied_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_tag"]) -> MetaOapg.properties.from_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_applied_date"]) -> MetaOapg.properties.last_applied_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to_tag"]) -> MetaOapg.properties.to_tag: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["applied_count", "creation_date", "from_tag", "last_applied_date", "to_tag", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applied_count"]) -> typing.Union[MetaOapg.properties.applied_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> typing.Union[MetaOapg.properties.creation_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_tag"]) -> typing.Union[MetaOapg.properties.from_tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_applied_date"]) -> typing.Union[MetaOapg.properties.last_applied_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to_tag"]) -> typing.Union[MetaOapg.properties.to_tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applied_count", "creation_date", "from_tag", "last_applied_date", "to_tag", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        applied_count: typing.Union[MetaOapg.properties.applied_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        from_tag: typing.Union[MetaOapg.properties.from_tag, str, schemas.Unset] = schemas.unset,
        last_applied_date: typing.Union[MetaOapg.properties.last_applied_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        to_tag: typing.Union[MetaOapg.properties.to_tag, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TagSynonymsItem':
        return super().__new__(
            cls,
            *args,
            applied_count=applied_count,
            creation_date=creation_date,
            from_tag=from_tag,
            last_applied_date=last_applied_date,
            to_tag=to_tag,
            _configuration=_configuration,
            **kwargs,
        )
