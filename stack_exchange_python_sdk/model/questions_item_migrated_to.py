# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class QuestionsItemMigratedTo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            on_date = schemas.IntSchema
        
            @staticmethod
            def other_site() -> typing.Type['QuestionsItemMigratedToOtherSite']:
                return QuestionsItemMigratedToOtherSite
            question_id = schemas.IntSchema
            __annotations__ = {
                "on_date": on_date,
                "other_site": other_site,
                "question_id": question_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_date"]) -> MetaOapg.properties.on_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_site"]) -> 'QuestionsItemMigratedToOtherSite': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_id"]) -> MetaOapg.properties.question_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["on_date", "other_site", "question_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_date"]) -> typing.Union[MetaOapg.properties.on_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_site"]) -> typing.Union['QuestionsItemMigratedToOtherSite', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_id"]) -> typing.Union[MetaOapg.properties.question_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["on_date", "other_site", "question_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        on_date: typing.Union[MetaOapg.properties.on_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        other_site: typing.Union['QuestionsItemMigratedToOtherSite', schemas.Unset] = schemas.unset,
        question_id: typing.Union[MetaOapg.properties.question_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QuestionsItemMigratedTo':
        return super().__new__(
            cls,
            *args,
            on_date=on_date,
            other_site=other_site,
            question_id=question_id,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.questions_item_migrated_to_other_site import QuestionsItemMigratedToOtherSite
