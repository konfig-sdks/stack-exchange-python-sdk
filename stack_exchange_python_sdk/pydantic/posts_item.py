# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from stack_exchange_python_sdk.pydantic.posts_item_comments import PostsItemComments
from stack_exchange_python_sdk.pydantic.posts_item_last_editor import PostsItemLastEditor
from stack_exchange_python_sdk.pydantic.posts_item_owner import PostsItemOwner

class PostsItem(BaseModel):
    title: typing.Optional[str] = Field(None, alias='title')

    body: typing.Optional[str] = Field(None, alias='body')

    body_markdown: typing.Optional[str] = Field(None, alias='body_markdown')

    comment_count: typing.Optional[int] = Field(None, alias='comment_count')

    comments: typing.Optional[PostsItemComments] = Field(None, alias='comments')

    creation_date: typing.Optional[int] = Field(None, alias='creation_date')

    down_vote_count: typing.Optional[int] = Field(None, alias='down_vote_count')

    downvoted: typing.Optional[bool] = Field(None, alias='downvoted')

    last_activity_date: typing.Optional[int] = Field(None, alias='last_activity_date')

    last_edit_date: typing.Optional[int] = Field(None, alias='last_edit_date')

    last_editor: typing.Optional[PostsItemLastEditor] = Field(None, alias='last_editor')

    link: typing.Optional[str] = Field(None, alias='link')

    owner: typing.Optional[PostsItemOwner] = Field(None, alias='owner')

    post_id: typing.Optional[int] = Field(None, alias='post_id')

    post_type: typing.Optional[str] = Field(None, alias='post_type')

    score: typing.Optional[int] = Field(None, alias='score')

    share_link: typing.Optional[str] = Field(None, alias='share_link')

    up_vote_count: typing.Optional[int] = Field(None, alias='up_vote_count')

    upvoted: typing.Optional[bool] = Field(None, alias='upvoted')
    class Config:
        arbitrary_types_allowed = True
