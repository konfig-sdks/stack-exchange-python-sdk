# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class TagsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            count = schemas.IntSchema
            has_synonyms = schemas.BoolSchema
            is_moderator_only = schemas.BoolSchema
            is_required = schemas.BoolSchema
            last_activity_date = schemas.IntSchema
            name = schemas.StrSchema
        
            @staticmethod
            def synonyms() -> typing.Type['TagsItemSynonyms']:
                return TagsItemSynonyms
            user_id = schemas.IntSchema
            __annotations__ = {
                "count": count,
                "has_synonyms": has_synonyms,
                "is_moderator_only": is_moderator_only,
                "is_required": is_required,
                "last_activity_date": last_activity_date,
                "name": name,
                "synonyms": synonyms,
                "user_id": user_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_synonyms"]) -> MetaOapg.properties.has_synonyms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_moderator_only"]) -> MetaOapg.properties.is_moderator_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_required"]) -> MetaOapg.properties.is_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity_date"]) -> MetaOapg.properties.last_activity_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synonyms"]) -> 'TagsItemSynonyms': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "has_synonyms", "is_moderator_only", "is_required", "last_activity_date", "name", "synonyms", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_synonyms"]) -> typing.Union[MetaOapg.properties.has_synonyms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_moderator_only"]) -> typing.Union[MetaOapg.properties.is_moderator_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_required"]) -> typing.Union[MetaOapg.properties.is_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity_date"]) -> typing.Union[MetaOapg.properties.last_activity_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synonyms"]) -> typing.Union['TagsItemSynonyms', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "has_synonyms", "is_moderator_only", "is_required", "last_activity_date", "name", "synonyms", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        has_synonyms: typing.Union[MetaOapg.properties.has_synonyms, bool, schemas.Unset] = schemas.unset,
        is_moderator_only: typing.Union[MetaOapg.properties.is_moderator_only, bool, schemas.Unset] = schemas.unset,
        is_required: typing.Union[MetaOapg.properties.is_required, bool, schemas.Unset] = schemas.unset,
        last_activity_date: typing.Union[MetaOapg.properties.last_activity_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        synonyms: typing.Union['TagsItemSynonyms', schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TagsItem':
        return super().__new__(
            cls,
            *args,
            count=count,
            has_synonyms=has_synonyms,
            is_moderator_only=is_moderator_only,
            is_required=is_required,
            last_activity_date=last_activity_date,
            name=name,
            synonyms=synonyms,
            user_id=user_id,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.tags_item_synonyms import TagsItemSynonyms
