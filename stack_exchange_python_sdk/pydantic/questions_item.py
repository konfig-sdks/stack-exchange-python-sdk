# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from stack_exchange_python_sdk.pydantic.questions_item_answers import QuestionsItemAnswers
from stack_exchange_python_sdk.pydantic.questions_item_bounty_user import QuestionsItemBountyUser
from stack_exchange_python_sdk.pydantic.questions_item_closed_details import QuestionsItemClosedDetails
from stack_exchange_python_sdk.pydantic.questions_item_comments import QuestionsItemComments
from stack_exchange_python_sdk.pydantic.questions_item_last_editor import QuestionsItemLastEditor
from stack_exchange_python_sdk.pydantic.questions_item_migrated_from import QuestionsItemMigratedFrom
from stack_exchange_python_sdk.pydantic.questions_item_migrated_to import QuestionsItemMigratedTo
from stack_exchange_python_sdk.pydantic.questions_item_notice import QuestionsItemNotice
from stack_exchange_python_sdk.pydantic.questions_item_owner import QuestionsItemOwner
from stack_exchange_python_sdk.pydantic.questions_item_tags import QuestionsItemTags

class QuestionsItem(BaseModel):
    tags: typing.Optional[QuestionsItemTags] = Field(None, alias='tags')

    title: typing.Optional[str] = Field(None, alias='title')

    accepted_answer_id: typing.Optional[int] = Field(None, alias='accepted_answer_id')

    answer_count: typing.Optional[int] = Field(None, alias='answer_count')

    answers: typing.Optional[QuestionsItemAnswers] = Field(None, alias='answers')

    body: typing.Optional[str] = Field(None, alias='body')

    body_markdown: typing.Optional[str] = Field(None, alias='body_markdown')

    bounty_amount: typing.Optional[int] = Field(None, alias='bounty_amount')

    bounty_closes_date: typing.Optional[int] = Field(None, alias='bounty_closes_date')

    bounty_user: typing.Optional[QuestionsItemBountyUser] = Field(None, alias='bounty_user')

    can_close: typing.Optional[bool] = Field(None, alias='can_close')

    can_flag: typing.Optional[bool] = Field(None, alias='can_flag')

    close_vote_count: typing.Optional[int] = Field(None, alias='close_vote_count')

    closed_date: typing.Optional[int] = Field(None, alias='closed_date')

    closed_details: typing.Optional[QuestionsItemClosedDetails] = Field(None, alias='closed_details')

    closed_reason: typing.Optional[str] = Field(None, alias='closed_reason')

    comment_count: typing.Optional[int] = Field(None, alias='comment_count')

    comments: typing.Optional[QuestionsItemComments] = Field(None, alias='comments')

    community_owned_date: typing.Optional[int] = Field(None, alias='community_owned_date')

    creation_date: typing.Optional[int] = Field(None, alias='creation_date')

    delete_vote_count: typing.Optional[int] = Field(None, alias='delete_vote_count')

    down_vote_count: typing.Optional[int] = Field(None, alias='down_vote_count')

    downvoted: typing.Optional[bool] = Field(None, alias='downvoted')

    favorite_count: typing.Optional[int] = Field(None, alias='favorite_count')

    favorited: typing.Optional[bool] = Field(None, alias='favorited')

    is_answered: typing.Optional[bool] = Field(None, alias='is_answered')

    last_activity_date: typing.Optional[int] = Field(None, alias='last_activity_date')

    last_edit_date: typing.Optional[int] = Field(None, alias='last_edit_date')

    last_editor: typing.Optional[QuestionsItemLastEditor] = Field(None, alias='last_editor')

    link: typing.Optional[str] = Field(None, alias='link')

    locked_date: typing.Optional[int] = Field(None, alias='locked_date')

    migrated_from: typing.Optional[QuestionsItemMigratedFrom] = Field(None, alias='migrated_from')

    migrated_to: typing.Optional[QuestionsItemMigratedTo] = Field(None, alias='migrated_to')

    notice: typing.Optional[QuestionsItemNotice] = Field(None, alias='notice')

    owner: typing.Optional[QuestionsItemOwner] = Field(None, alias='owner')

    protected_date: typing.Optional[int] = Field(None, alias='protected_date')

    question_id: typing.Optional[int] = Field(None, alias='question_id')

    reopen_vote_count: typing.Optional[int] = Field(None, alias='reopen_vote_count')

    score: typing.Optional[int] = Field(None, alias='score')

    share_link: typing.Optional[str] = Field(None, alias='share_link')

    up_vote_count: typing.Optional[int] = Field(None, alias='up_vote_count')

    upvoted: typing.Optional[bool] = Field(None, alias='upvoted')

    view_count: typing.Optional[int] = Field(None, alias='view_count')
    class Config:
        arbitrary_types_allowed = True
