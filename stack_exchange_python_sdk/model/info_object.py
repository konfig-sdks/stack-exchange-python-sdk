# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class InfoObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            answers_per_minute = schemas.NumberSchema
            api_revision = schemas.StrSchema
            badges_per_minute = schemas.NumberSchema
            new_active_users = schemas.IntSchema
            questions_per_minute = schemas.NumberSchema
        
            @staticmethod
            def site() -> typing.Type['InfoObjectSite']:
                return InfoObjectSite
            total_accepted = schemas.IntSchema
            total_answers = schemas.IntSchema
            total_badges = schemas.IntSchema
            total_comments = schemas.IntSchema
            total_questions = schemas.IntSchema
            total_unanswered = schemas.IntSchema
            total_users = schemas.IntSchema
            total_votes = schemas.IntSchema
            __annotations__ = {
                "answers_per_minute": answers_per_minute,
                "api_revision": api_revision,
                "badges_per_minute": badges_per_minute,
                "new_active_users": new_active_users,
                "questions_per_minute": questions_per_minute,
                "site": site,
                "total_accepted": total_accepted,
                "total_answers": total_answers,
                "total_badges": total_badges,
                "total_comments": total_comments,
                "total_questions": total_questions,
                "total_unanswered": total_unanswered,
                "total_users": total_users,
                "total_votes": total_votes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answers_per_minute"]) -> MetaOapg.properties.answers_per_minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_revision"]) -> MetaOapg.properties.api_revision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["badges_per_minute"]) -> MetaOapg.properties.badges_per_minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_active_users"]) -> MetaOapg.properties.new_active_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["questions_per_minute"]) -> MetaOapg.properties.questions_per_minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site"]) -> 'InfoObjectSite': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_accepted"]) -> MetaOapg.properties.total_accepted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_answers"]) -> MetaOapg.properties.total_answers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_badges"]) -> MetaOapg.properties.total_badges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_comments"]) -> MetaOapg.properties.total_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_questions"]) -> MetaOapg.properties.total_questions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_unanswered"]) -> MetaOapg.properties.total_unanswered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_users"]) -> MetaOapg.properties.total_users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_votes"]) -> MetaOapg.properties.total_votes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["answers_per_minute", "api_revision", "badges_per_minute", "new_active_users", "questions_per_minute", "site", "total_accepted", "total_answers", "total_badges", "total_comments", "total_questions", "total_unanswered", "total_users", "total_votes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answers_per_minute"]) -> typing.Union[MetaOapg.properties.answers_per_minute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_revision"]) -> typing.Union[MetaOapg.properties.api_revision, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["badges_per_minute"]) -> typing.Union[MetaOapg.properties.badges_per_minute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_active_users"]) -> typing.Union[MetaOapg.properties.new_active_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["questions_per_minute"]) -> typing.Union[MetaOapg.properties.questions_per_minute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site"]) -> typing.Union['InfoObjectSite', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_accepted"]) -> typing.Union[MetaOapg.properties.total_accepted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_answers"]) -> typing.Union[MetaOapg.properties.total_answers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_badges"]) -> typing.Union[MetaOapg.properties.total_badges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_comments"]) -> typing.Union[MetaOapg.properties.total_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_questions"]) -> typing.Union[MetaOapg.properties.total_questions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_unanswered"]) -> typing.Union[MetaOapg.properties.total_unanswered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_users"]) -> typing.Union[MetaOapg.properties.total_users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_votes"]) -> typing.Union[MetaOapg.properties.total_votes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["answers_per_minute", "api_revision", "badges_per_minute", "new_active_users", "questions_per_minute", "site", "total_accepted", "total_answers", "total_badges", "total_comments", "total_questions", "total_unanswered", "total_users", "total_votes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        answers_per_minute: typing.Union[MetaOapg.properties.answers_per_minute, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        api_revision: typing.Union[MetaOapg.properties.api_revision, str, schemas.Unset] = schemas.unset,
        badges_per_minute: typing.Union[MetaOapg.properties.badges_per_minute, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        new_active_users: typing.Union[MetaOapg.properties.new_active_users, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        questions_per_minute: typing.Union[MetaOapg.properties.questions_per_minute, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        site: typing.Union['InfoObjectSite', schemas.Unset] = schemas.unset,
        total_accepted: typing.Union[MetaOapg.properties.total_accepted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_answers: typing.Union[MetaOapg.properties.total_answers, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_badges: typing.Union[MetaOapg.properties.total_badges, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_comments: typing.Union[MetaOapg.properties.total_comments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_questions: typing.Union[MetaOapg.properties.total_questions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_unanswered: typing.Union[MetaOapg.properties.total_unanswered, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_users: typing.Union[MetaOapg.properties.total_users, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_votes: typing.Union[MetaOapg.properties.total_votes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InfoObject':
        return super().__new__(
            cls,
            *args,
            answers_per_minute=answers_per_minute,
            api_revision=api_revision,
            badges_per_minute=badges_per_minute,
            new_active_users=new_active_users,
            questions_per_minute=questions_per_minute,
            site=site,
            total_accepted=total_accepted,
            total_answers=total_answers,
            total_badges=total_badges,
            total_comments=total_comments,
            total_questions=total_questions,
            total_unanswered=total_unanswered,
            total_users=total_users,
            total_votes=total_votes,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.info_object_site import InfoObjectSite
