# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class AnswersItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['AnswersItemTags']:
                return AnswersItemTags
            title = schemas.StrSchema
            accepted = schemas.BoolSchema
            answer_id = schemas.IntSchema
            awarded_bounty_amount = schemas.IntSchema
        
            @staticmethod
            def awarded_bounty_users() -> typing.Type['AnswersItemAwardedBountyUsers']:
                return AnswersItemAwardedBountyUsers
            body = schemas.StrSchema
            body_markdown = schemas.StrSchema
            can_flag = schemas.BoolSchema
            comment_count = schemas.IntSchema
        
            @staticmethod
            def comments() -> typing.Type['AnswersItemComments']:
                return AnswersItemComments
            community_owned_date = schemas.IntSchema
            creation_date = schemas.IntSchema
            down_vote_count = schemas.IntSchema
            downvoted = schemas.BoolSchema
            is_accepted = schemas.BoolSchema
            last_activity_date = schemas.IntSchema
            last_edit_date = schemas.IntSchema
        
            @staticmethod
            def last_editor() -> typing.Type['AnswersItemLastEditor']:
                return AnswersItemLastEditor
            link = schemas.StrSchema
            locked_date = schemas.IntSchema
        
            @staticmethod
            def owner() -> typing.Type['AnswersItemOwner']:
                return AnswersItemOwner
            question_id = schemas.IntSchema
            score = schemas.IntSchema
            share_link = schemas.StrSchema
            up_vote_count = schemas.IntSchema
            upvoted = schemas.BoolSchema
            __annotations__ = {
                "tags": tags,
                "title": title,
                "accepted": accepted,
                "answer_id": answer_id,
                "awarded_bounty_amount": awarded_bounty_amount,
                "awarded_bounty_users": awarded_bounty_users,
                "body": body,
                "body_markdown": body_markdown,
                "can_flag": can_flag,
                "comment_count": comment_count,
                "comments": comments,
                "community_owned_date": community_owned_date,
                "creation_date": creation_date,
                "down_vote_count": down_vote_count,
                "downvoted": downvoted,
                "is_accepted": is_accepted,
                "last_activity_date": last_activity_date,
                "last_edit_date": last_edit_date,
                "last_editor": last_editor,
                "link": link,
                "locked_date": locked_date,
                "owner": owner,
                "question_id": question_id,
                "score": score,
                "share_link": share_link,
                "up_vote_count": up_vote_count,
                "upvoted": upvoted,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'AnswersItemTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accepted"]) -> MetaOapg.properties.accepted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_id"]) -> MetaOapg.properties.answer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awarded_bounty_amount"]) -> MetaOapg.properties.awarded_bounty_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awarded_bounty_users"]) -> 'AnswersItemAwardedBountyUsers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body_markdown"]) -> MetaOapg.properties.body_markdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_flag"]) -> MetaOapg.properties.can_flag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment_count"]) -> MetaOapg.properties.comment_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> 'AnswersItemComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["community_owned_date"]) -> MetaOapg.properties.community_owned_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["down_vote_count"]) -> MetaOapg.properties.down_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downvoted"]) -> MetaOapg.properties.downvoted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_accepted"]) -> MetaOapg.properties.is_accepted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity_date"]) -> MetaOapg.properties.last_activity_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_edit_date"]) -> MetaOapg.properties.last_edit_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_editor"]) -> 'AnswersItemLastEditor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked_date"]) -> MetaOapg.properties.locked_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'AnswersItemOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_id"]) -> MetaOapg.properties.question_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share_link"]) -> MetaOapg.properties.share_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["up_vote_count"]) -> MetaOapg.properties.up_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upvoted"]) -> MetaOapg.properties.upvoted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "title", "accepted", "answer_id", "awarded_bounty_amount", "awarded_bounty_users", "body", "body_markdown", "can_flag", "comment_count", "comments", "community_owned_date", "creation_date", "down_vote_count", "downvoted", "is_accepted", "last_activity_date", "last_edit_date", "last_editor", "link", "locked_date", "owner", "question_id", "score", "share_link", "up_vote_count", "upvoted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['AnswersItemTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accepted"]) -> typing.Union[MetaOapg.properties.accepted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_id"]) -> typing.Union[MetaOapg.properties.answer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awarded_bounty_amount"]) -> typing.Union[MetaOapg.properties.awarded_bounty_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awarded_bounty_users"]) -> typing.Union['AnswersItemAwardedBountyUsers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body_markdown"]) -> typing.Union[MetaOapg.properties.body_markdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_flag"]) -> typing.Union[MetaOapg.properties.can_flag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment_count"]) -> typing.Union[MetaOapg.properties.comment_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union['AnswersItemComments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["community_owned_date"]) -> typing.Union[MetaOapg.properties.community_owned_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> typing.Union[MetaOapg.properties.creation_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["down_vote_count"]) -> typing.Union[MetaOapg.properties.down_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downvoted"]) -> typing.Union[MetaOapg.properties.downvoted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_accepted"]) -> typing.Union[MetaOapg.properties.is_accepted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity_date"]) -> typing.Union[MetaOapg.properties.last_activity_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_edit_date"]) -> typing.Union[MetaOapg.properties.last_edit_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_editor"]) -> typing.Union['AnswersItemLastEditor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked_date"]) -> typing.Union[MetaOapg.properties.locked_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['AnswersItemOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_id"]) -> typing.Union[MetaOapg.properties.question_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share_link"]) -> typing.Union[MetaOapg.properties.share_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["up_vote_count"]) -> typing.Union[MetaOapg.properties.up_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upvoted"]) -> typing.Union[MetaOapg.properties.upvoted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "title", "accepted", "answer_id", "awarded_bounty_amount", "awarded_bounty_users", "body", "body_markdown", "can_flag", "comment_count", "comments", "community_owned_date", "creation_date", "down_vote_count", "downvoted", "is_accepted", "last_activity_date", "last_edit_date", "last_editor", "link", "locked_date", "owner", "question_id", "score", "share_link", "up_vote_count", "upvoted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['AnswersItemTags', schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        accepted: typing.Union[MetaOapg.properties.accepted, bool, schemas.Unset] = schemas.unset,
        answer_id: typing.Union[MetaOapg.properties.answer_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        awarded_bounty_amount: typing.Union[MetaOapg.properties.awarded_bounty_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        awarded_bounty_users: typing.Union['AnswersItemAwardedBountyUsers', schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        body_markdown: typing.Union[MetaOapg.properties.body_markdown, str, schemas.Unset] = schemas.unset,
        can_flag: typing.Union[MetaOapg.properties.can_flag, bool, schemas.Unset] = schemas.unset,
        comment_count: typing.Union[MetaOapg.properties.comment_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comments: typing.Union['AnswersItemComments', schemas.Unset] = schemas.unset,
        community_owned_date: typing.Union[MetaOapg.properties.community_owned_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        down_vote_count: typing.Union[MetaOapg.properties.down_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        downvoted: typing.Union[MetaOapg.properties.downvoted, bool, schemas.Unset] = schemas.unset,
        is_accepted: typing.Union[MetaOapg.properties.is_accepted, bool, schemas.Unset] = schemas.unset,
        last_activity_date: typing.Union[MetaOapg.properties.last_activity_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_edit_date: typing.Union[MetaOapg.properties.last_edit_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_editor: typing.Union['AnswersItemLastEditor', schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        locked_date: typing.Union[MetaOapg.properties.locked_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner: typing.Union['AnswersItemOwner', schemas.Unset] = schemas.unset,
        question_id: typing.Union[MetaOapg.properties.question_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        share_link: typing.Union[MetaOapg.properties.share_link, str, schemas.Unset] = schemas.unset,
        up_vote_count: typing.Union[MetaOapg.properties.up_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        upvoted: typing.Union[MetaOapg.properties.upvoted, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnswersItem':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            title=title,
            accepted=accepted,
            answer_id=answer_id,
            awarded_bounty_amount=awarded_bounty_amount,
            awarded_bounty_users=awarded_bounty_users,
            body=body,
            body_markdown=body_markdown,
            can_flag=can_flag,
            comment_count=comment_count,
            comments=comments,
            community_owned_date=community_owned_date,
            creation_date=creation_date,
            down_vote_count=down_vote_count,
            downvoted=downvoted,
            is_accepted=is_accepted,
            last_activity_date=last_activity_date,
            last_edit_date=last_edit_date,
            last_editor=last_editor,
            link=link,
            locked_date=locked_date,
            owner=owner,
            question_id=question_id,
            score=score,
            share_link=share_link,
            up_vote_count=up_vote_count,
            upvoted=upvoted,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.answers_item_awarded_bounty_users import AnswersItemAwardedBountyUsers
from stack_exchange_python_sdk.model.answers_item_comments import AnswersItemComments
from stack_exchange_python_sdk.model.answers_item_last_editor import AnswersItemLastEditor
from stack_exchange_python_sdk.model.answers_item_owner import AnswersItemOwner
from stack_exchange_python_sdk.model.answers_item_tags import AnswersItemTags
