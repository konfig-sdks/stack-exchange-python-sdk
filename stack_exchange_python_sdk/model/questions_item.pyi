# coding: utf-8

"""
    StackExchange

    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 

    The version of the OpenAPI document: 2.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from stack_exchange_python_sdk import schemas  # noqa: F401


class QuestionsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['QuestionsItemTags']:
                return QuestionsItemTags
            title = schemas.StrSchema
            accepted_answer_id = schemas.IntSchema
            answer_count = schemas.IntSchema
        
            @staticmethod
            def answers() -> typing.Type['QuestionsItemAnswers']:
                return QuestionsItemAnswers
            body = schemas.StrSchema
            body_markdown = schemas.StrSchema
            bounty_amount = schemas.IntSchema
            bounty_closes_date = schemas.IntSchema
        
            @staticmethod
            def bounty_user() -> typing.Type['QuestionsItemBountyUser']:
                return QuestionsItemBountyUser
            can_close = schemas.BoolSchema
            can_flag = schemas.BoolSchema
            close_vote_count = schemas.IntSchema
            closed_date = schemas.IntSchema
        
            @staticmethod
            def closed_details() -> typing.Type['QuestionsItemClosedDetails']:
                return QuestionsItemClosedDetails
            closed_reason = schemas.StrSchema
            comment_count = schemas.IntSchema
        
            @staticmethod
            def comments() -> typing.Type['QuestionsItemComments']:
                return QuestionsItemComments
            community_owned_date = schemas.IntSchema
            creation_date = schemas.IntSchema
            delete_vote_count = schemas.IntSchema
            down_vote_count = schemas.IntSchema
            downvoted = schemas.BoolSchema
            favorite_count = schemas.IntSchema
            favorited = schemas.BoolSchema
            is_answered = schemas.BoolSchema
            last_activity_date = schemas.IntSchema
            last_edit_date = schemas.IntSchema
        
            @staticmethod
            def last_editor() -> typing.Type['QuestionsItemLastEditor']:
                return QuestionsItemLastEditor
            link = schemas.StrSchema
            locked_date = schemas.IntSchema
        
            @staticmethod
            def migrated_from() -> typing.Type['QuestionsItemMigratedFrom']:
                return QuestionsItemMigratedFrom
        
            @staticmethod
            def migrated_to() -> typing.Type['QuestionsItemMigratedTo']:
                return QuestionsItemMigratedTo
        
            @staticmethod
            def notice() -> typing.Type['QuestionsItemNotice']:
                return QuestionsItemNotice
        
            @staticmethod
            def owner() -> typing.Type['QuestionsItemOwner']:
                return QuestionsItemOwner
            protected_date = schemas.IntSchema
            question_id = schemas.IntSchema
            reopen_vote_count = schemas.IntSchema
            score = schemas.IntSchema
            share_link = schemas.StrSchema
            up_vote_count = schemas.IntSchema
            upvoted = schemas.BoolSchema
            view_count = schemas.IntSchema
            __annotations__ = {
                "tags": tags,
                "title": title,
                "accepted_answer_id": accepted_answer_id,
                "answer_count": answer_count,
                "answers": answers,
                "body": body,
                "body_markdown": body_markdown,
                "bounty_amount": bounty_amount,
                "bounty_closes_date": bounty_closes_date,
                "bounty_user": bounty_user,
                "can_close": can_close,
                "can_flag": can_flag,
                "close_vote_count": close_vote_count,
                "closed_date": closed_date,
                "closed_details": closed_details,
                "closed_reason": closed_reason,
                "comment_count": comment_count,
                "comments": comments,
                "community_owned_date": community_owned_date,
                "creation_date": creation_date,
                "delete_vote_count": delete_vote_count,
                "down_vote_count": down_vote_count,
                "downvoted": downvoted,
                "favorite_count": favorite_count,
                "favorited": favorited,
                "is_answered": is_answered,
                "last_activity_date": last_activity_date,
                "last_edit_date": last_edit_date,
                "last_editor": last_editor,
                "link": link,
                "locked_date": locked_date,
                "migrated_from": migrated_from,
                "migrated_to": migrated_to,
                "notice": notice,
                "owner": owner,
                "protected_date": protected_date,
                "question_id": question_id,
                "reopen_vote_count": reopen_vote_count,
                "score": score,
                "share_link": share_link,
                "up_vote_count": up_vote_count,
                "upvoted": upvoted,
                "view_count": view_count,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'QuestionsItemTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accepted_answer_id"]) -> MetaOapg.properties.accepted_answer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answer_count"]) -> MetaOapg.properties.answer_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answers"]) -> 'QuestionsItemAnswers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body_markdown"]) -> MetaOapg.properties.body_markdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bounty_amount"]) -> MetaOapg.properties.bounty_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bounty_closes_date"]) -> MetaOapg.properties.bounty_closes_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bounty_user"]) -> 'QuestionsItemBountyUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_close"]) -> MetaOapg.properties.can_close: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_flag"]) -> MetaOapg.properties.can_flag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["close_vote_count"]) -> MetaOapg.properties.close_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_date"]) -> MetaOapg.properties.closed_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_details"]) -> 'QuestionsItemClosedDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_reason"]) -> MetaOapg.properties.closed_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment_count"]) -> MetaOapg.properties.comment_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> 'QuestionsItemComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["community_owned_date"]) -> MetaOapg.properties.community_owned_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date"]) -> MetaOapg.properties.creation_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_vote_count"]) -> MetaOapg.properties.delete_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["down_vote_count"]) -> MetaOapg.properties.down_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downvoted"]) -> MetaOapg.properties.downvoted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favorite_count"]) -> MetaOapg.properties.favorite_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favorited"]) -> MetaOapg.properties.favorited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_answered"]) -> MetaOapg.properties.is_answered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_activity_date"]) -> MetaOapg.properties.last_activity_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_edit_date"]) -> MetaOapg.properties.last_edit_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_editor"]) -> 'QuestionsItemLastEditor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked_date"]) -> MetaOapg.properties.locked_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["migrated_from"]) -> 'QuestionsItemMigratedFrom': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["migrated_to"]) -> 'QuestionsItemMigratedTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notice"]) -> 'QuestionsItemNotice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'QuestionsItemOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protected_date"]) -> MetaOapg.properties.protected_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["question_id"]) -> MetaOapg.properties.question_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reopen_vote_count"]) -> MetaOapg.properties.reopen_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share_link"]) -> MetaOapg.properties.share_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["up_vote_count"]) -> MetaOapg.properties.up_vote_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upvoted"]) -> MetaOapg.properties.upvoted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_count"]) -> MetaOapg.properties.view_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "title", "accepted_answer_id", "answer_count", "answers", "body", "body_markdown", "bounty_amount", "bounty_closes_date", "bounty_user", "can_close", "can_flag", "close_vote_count", "closed_date", "closed_details", "closed_reason", "comment_count", "comments", "community_owned_date", "creation_date", "delete_vote_count", "down_vote_count", "downvoted", "favorite_count", "favorited", "is_answered", "last_activity_date", "last_edit_date", "last_editor", "link", "locked_date", "migrated_from", "migrated_to", "notice", "owner", "protected_date", "question_id", "reopen_vote_count", "score", "share_link", "up_vote_count", "upvoted", "view_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['QuestionsItemTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accepted_answer_id"]) -> typing.Union[MetaOapg.properties.accepted_answer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answer_count"]) -> typing.Union[MetaOapg.properties.answer_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answers"]) -> typing.Union['QuestionsItemAnswers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body_markdown"]) -> typing.Union[MetaOapg.properties.body_markdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bounty_amount"]) -> typing.Union[MetaOapg.properties.bounty_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bounty_closes_date"]) -> typing.Union[MetaOapg.properties.bounty_closes_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bounty_user"]) -> typing.Union['QuestionsItemBountyUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_close"]) -> typing.Union[MetaOapg.properties.can_close, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_flag"]) -> typing.Union[MetaOapg.properties.can_flag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["close_vote_count"]) -> typing.Union[MetaOapg.properties.close_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_date"]) -> typing.Union[MetaOapg.properties.closed_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_details"]) -> typing.Union['QuestionsItemClosedDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_reason"]) -> typing.Union[MetaOapg.properties.closed_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment_count"]) -> typing.Union[MetaOapg.properties.comment_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union['QuestionsItemComments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["community_owned_date"]) -> typing.Union[MetaOapg.properties.community_owned_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date"]) -> typing.Union[MetaOapg.properties.creation_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_vote_count"]) -> typing.Union[MetaOapg.properties.delete_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["down_vote_count"]) -> typing.Union[MetaOapg.properties.down_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downvoted"]) -> typing.Union[MetaOapg.properties.downvoted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favorite_count"]) -> typing.Union[MetaOapg.properties.favorite_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favorited"]) -> typing.Union[MetaOapg.properties.favorited, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_answered"]) -> typing.Union[MetaOapg.properties.is_answered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_activity_date"]) -> typing.Union[MetaOapg.properties.last_activity_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_edit_date"]) -> typing.Union[MetaOapg.properties.last_edit_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_editor"]) -> typing.Union['QuestionsItemLastEditor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked_date"]) -> typing.Union[MetaOapg.properties.locked_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["migrated_from"]) -> typing.Union['QuestionsItemMigratedFrom', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["migrated_to"]) -> typing.Union['QuestionsItemMigratedTo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notice"]) -> typing.Union['QuestionsItemNotice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['QuestionsItemOwner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protected_date"]) -> typing.Union[MetaOapg.properties.protected_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["question_id"]) -> typing.Union[MetaOapg.properties.question_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reopen_vote_count"]) -> typing.Union[MetaOapg.properties.reopen_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share_link"]) -> typing.Union[MetaOapg.properties.share_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["up_vote_count"]) -> typing.Union[MetaOapg.properties.up_vote_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upvoted"]) -> typing.Union[MetaOapg.properties.upvoted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_count"]) -> typing.Union[MetaOapg.properties.view_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "title", "accepted_answer_id", "answer_count", "answers", "body", "body_markdown", "bounty_amount", "bounty_closes_date", "bounty_user", "can_close", "can_flag", "close_vote_count", "closed_date", "closed_details", "closed_reason", "comment_count", "comments", "community_owned_date", "creation_date", "delete_vote_count", "down_vote_count", "downvoted", "favorite_count", "favorited", "is_answered", "last_activity_date", "last_edit_date", "last_editor", "link", "locked_date", "migrated_from", "migrated_to", "notice", "owner", "protected_date", "question_id", "reopen_vote_count", "score", "share_link", "up_vote_count", "upvoted", "view_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['QuestionsItemTags', schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        accepted_answer_id: typing.Union[MetaOapg.properties.accepted_answer_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        answer_count: typing.Union[MetaOapg.properties.answer_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        answers: typing.Union['QuestionsItemAnswers', schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        body_markdown: typing.Union[MetaOapg.properties.body_markdown, str, schemas.Unset] = schemas.unset,
        bounty_amount: typing.Union[MetaOapg.properties.bounty_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bounty_closes_date: typing.Union[MetaOapg.properties.bounty_closes_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bounty_user: typing.Union['QuestionsItemBountyUser', schemas.Unset] = schemas.unset,
        can_close: typing.Union[MetaOapg.properties.can_close, bool, schemas.Unset] = schemas.unset,
        can_flag: typing.Union[MetaOapg.properties.can_flag, bool, schemas.Unset] = schemas.unset,
        close_vote_count: typing.Union[MetaOapg.properties.close_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        closed_date: typing.Union[MetaOapg.properties.closed_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        closed_details: typing.Union['QuestionsItemClosedDetails', schemas.Unset] = schemas.unset,
        closed_reason: typing.Union[MetaOapg.properties.closed_reason, str, schemas.Unset] = schemas.unset,
        comment_count: typing.Union[MetaOapg.properties.comment_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comments: typing.Union['QuestionsItemComments', schemas.Unset] = schemas.unset,
        community_owned_date: typing.Union[MetaOapg.properties.community_owned_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creation_date: typing.Union[MetaOapg.properties.creation_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delete_vote_count: typing.Union[MetaOapg.properties.delete_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        down_vote_count: typing.Union[MetaOapg.properties.down_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        downvoted: typing.Union[MetaOapg.properties.downvoted, bool, schemas.Unset] = schemas.unset,
        favorite_count: typing.Union[MetaOapg.properties.favorite_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        favorited: typing.Union[MetaOapg.properties.favorited, bool, schemas.Unset] = schemas.unset,
        is_answered: typing.Union[MetaOapg.properties.is_answered, bool, schemas.Unset] = schemas.unset,
        last_activity_date: typing.Union[MetaOapg.properties.last_activity_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_edit_date: typing.Union[MetaOapg.properties.last_edit_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_editor: typing.Union['QuestionsItemLastEditor', schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        locked_date: typing.Union[MetaOapg.properties.locked_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        migrated_from: typing.Union['QuestionsItemMigratedFrom', schemas.Unset] = schemas.unset,
        migrated_to: typing.Union['QuestionsItemMigratedTo', schemas.Unset] = schemas.unset,
        notice: typing.Union['QuestionsItemNotice', schemas.Unset] = schemas.unset,
        owner: typing.Union['QuestionsItemOwner', schemas.Unset] = schemas.unset,
        protected_date: typing.Union[MetaOapg.properties.protected_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        question_id: typing.Union[MetaOapg.properties.question_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reopen_vote_count: typing.Union[MetaOapg.properties.reopen_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        share_link: typing.Union[MetaOapg.properties.share_link, str, schemas.Unset] = schemas.unset,
        up_vote_count: typing.Union[MetaOapg.properties.up_vote_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        upvoted: typing.Union[MetaOapg.properties.upvoted, bool, schemas.Unset] = schemas.unset,
        view_count: typing.Union[MetaOapg.properties.view_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QuestionsItem':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            title=title,
            accepted_answer_id=accepted_answer_id,
            answer_count=answer_count,
            answers=answers,
            body=body,
            body_markdown=body_markdown,
            bounty_amount=bounty_amount,
            bounty_closes_date=bounty_closes_date,
            bounty_user=bounty_user,
            can_close=can_close,
            can_flag=can_flag,
            close_vote_count=close_vote_count,
            closed_date=closed_date,
            closed_details=closed_details,
            closed_reason=closed_reason,
            comment_count=comment_count,
            comments=comments,
            community_owned_date=community_owned_date,
            creation_date=creation_date,
            delete_vote_count=delete_vote_count,
            down_vote_count=down_vote_count,
            downvoted=downvoted,
            favorite_count=favorite_count,
            favorited=favorited,
            is_answered=is_answered,
            last_activity_date=last_activity_date,
            last_edit_date=last_edit_date,
            last_editor=last_editor,
            link=link,
            locked_date=locked_date,
            migrated_from=migrated_from,
            migrated_to=migrated_to,
            notice=notice,
            owner=owner,
            protected_date=protected_date,
            question_id=question_id,
            reopen_vote_count=reopen_vote_count,
            score=score,
            share_link=share_link,
            up_vote_count=up_vote_count,
            upvoted=upvoted,
            view_count=view_count,
            _configuration=_configuration,
            **kwargs,
        )

from stack_exchange_python_sdk.model.questions_item_answers import QuestionsItemAnswers
from stack_exchange_python_sdk.model.questions_item_bounty_user import QuestionsItemBountyUser
from stack_exchange_python_sdk.model.questions_item_closed_details import QuestionsItemClosedDetails
from stack_exchange_python_sdk.model.questions_item_comments import QuestionsItemComments
from stack_exchange_python_sdk.model.questions_item_last_editor import QuestionsItemLastEditor
from stack_exchange_python_sdk.model.questions_item_migrated_from import QuestionsItemMigratedFrom
from stack_exchange_python_sdk.model.questions_item_migrated_to import QuestionsItemMigratedTo
from stack_exchange_python_sdk.model.questions_item_notice import QuestionsItemNotice
from stack_exchange_python_sdk.model.questions_item_owner import QuestionsItemOwner
from stack_exchange_python_sdk.model.questions_item_tags import QuestionsItemTags
